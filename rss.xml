<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>WallyBum Blog</title>
        <link>https://wallybum.github.io/</link>
        <description>WallyBum Blog</description>
        <lastBuildDate>Wed, 04 Jan 2023 08:01:25 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>ko</language>
        <item>
            <title><![CDATA[About Me]]></title>
            <link>https://wallybum.github.io/about</link>
            <guid>about</guid>
            <pubDate>Wed, 04 Jan 2023 08:01:25 GMT</pubDate>
            <description><![CDATA[🛠 Tech Stack]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-tech-stack">🛠 Tech Stack<a class="hash-link" href="#-tech-stack" title="제목으로 바로 가기">​</a></h3><p><img loading="lazy" src="https://img.shields.io/badge/JAVA-007396?style=flat-square&amp;logo=Java&amp;logoColor=white" alt="java" class="img_ev3q">
<img loading="lazy" src="https://img.shields.io/badge/JAVASCRIPT-F7D1E?style=flat-square&amp;logo=JavaScript&amp;logoColor=white" alt="javascript" class="img_ev3q">
<img loading="lazy" src="https://img.shields.io/badge/HTML5-E34F26?style=flat-square&amp;logo=HTML5&amp;logoColor=white" alt="html5" class="img_ev3q">
<img loading="lazy" src="https://img.shields.io/badge/CSS3-1572B6?style=flat-square&amp;logo=CSS3&amp;logoColor=white" alt="css3" class="img_ev3q"></p><p><img loading="lazy" src="https://img.shields.io/badge/Spring-6DB33F?style=flat-square&amp;logo=Spring&amp;logoColor=white" alt="spring" class="img_ev3q"></p><p><img loading="lazy" src="https://img.shields.io/badge/Eclipse%20IDE-2C2255?style=flat-square&amp;logo=Eclipse%20IDE&amp;logoColor=white" alt="eclipse" class="img_ev3q">
<img loading="lazy" src="https://img.shields.io/badge/IntelliJ%20IDEA-000000.svg?style=flat-square&amp;logo=intellij-idea&amp;logoColor=white" alt="IntelliJ" class="img_ev3q">
<img loading="lazy" src="https://img.shields.io/badge/Apache%20Tomcat-F8DC75?style=flat-square&amp;logo=Apache%20Tomcat&amp;logoColor=white" alt="tomcat" class="img_ev3q"></p><p><img loading="lazy" src="https://img.shields.io/badge/Oracle-F80000?style=flat-square&amp;logo=oracle&amp;logoColor=white" alt="oracle" class="img_ev3q">
<img loading="lazy" src="https://img.shields.io/badge/MySQL-4479A1?style=flat-square&amp;logo=MySQL&amp;logoColor=white" alt="mysql" class="img_ev3q">
<img loading="lazy" src="https://img.shields.io/badge/PostgreSQL-4169E1?style=flat-square&amp;logo=PostgreSQL&amp;logoColor=white" alt="postgresql" class="img_ev3q"></p><p><img loading="lazy" src="https://img.shields.io/badge/Windows-0078D6?style=flat-square&amp;logo=Windows&amp;logoColor=white" alt="windows" class="img_ev3q">
<img loading="lazy" src="https://img.shields.io/badge/macOS-000000?style=flat-square&amp;logo=macOS&amp;logoColor=white" alt="macos" class="img_ev3q">
<img loading="lazy" src="https://img.shields.io/badge/Linux-FCC624?style=flat-square&amp;logo=Linux&amp;logoColor=white" alt="linux" class="img_ev3q"></p>]]></content:encoded>
            <category>About</category>
            <category>Resume</category>
        </item>
        <item>
            <title><![CDATA[Docker - no route to host]]></title>
            <link>https://wallybum.github.io/2022/11/30/no-route-to-host</link>
            <guid>/2022/11/30/no-route-to-host</guid>
            <pubDate>Wed, 30 Nov 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[개요]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="개요">개요<a class="hash-link" href="#개요" title="제목으로 바로 가기">​</a></h2><p>기존 Docker 4.2.X(2021.11월 릴리즈) 를 사용하다가, Docker 업데이트를 진행하였다. 업데이트를 마친 후 필요한 도커 이미지를 다운받으려고 시도하였으나, 접속이 되지 않는 문제가 발생하였다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="서버-환경">서버 환경<a class="hash-link" href="#서버-환경" title="제목으로 바로 가기">​</a></h2><ul><li>OS : Mac OS Ventura 13.0.1</li><li>컨테이너 : Docker 4.14.1</li><li></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="오류-발생">오류 발생<a class="hash-link" href="#오류-발생" title="제목으로 바로 가기">​</a></h2><div class="language-console codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-console codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">➡︎ docker search oracle-xe-11g</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Error response from daemon: Get "https://index.docker.io/v1/search?q=oracle-xe-11g&amp;n=25": proxyconnect tcp: dial tcp 192.168.65.128:3128: connect: no route to host</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>위 오류를 검색해보니 다음과 같은 해결책을 확인할 수 있었다.</p><ul><li><p>Docker 컨테이너에서 Host로 가는 트래픽이 제한되고 있으므로, 방화벽 규칙 수정.</p></li><li><p>Docker 환결설정에서 bridge network 대역을 변경 (bip 설정)</p></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="해결">해결<a class="hash-link" href="#해결" title="제목으로 바로 가기">​</a></h2><p>stackoverflow에서 저명성이 있는 사람들이 위에 대한 해결책을 제시하였으나, Docker 업데이트 전에는 발생하지 않던 문제가 업데이트 후 오류가 발생하였기 때문에, 현재 상황에서는 제시된 해결책이 적용되지 않는다고 생각하였다.</p><p>Docker Hub에 접속이 안되기 때문에, 먼저 Docker에 설정된 네트워크 인터페이스를 확인하였다.</p><div class="language-console codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-console codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">▶ docker network ls</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">NETWORK ID     NAME      DRIVER    SCOPE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">787cb617518a   bridge    bridge    local</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">5e8414efbceb   cluster   bridge    local</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">74c728f4e9d9   host      host      local</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">d11834db609c   none      null      local</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Docker에 대한 클러스터 설정을 하지 않았음에도, 클러스터 네트워크 인터페이스가 브릿지 모드로 설정된것을 확인하였다. </p><p>해당 네트워크를 제거하여 해결하였다.</p><p><img loading="lazy" alt="img1" src="/assets/images/removeNetwork-121fcf52b79b5da6c7d126394ab2aedc.png" width="2792" height="882" class="img_ev3q"></p>]]></content:encoded>
            <category>Docker</category>
            <category>Bridge</category>
            <category>Network</category>
        </item>
        <item>
            <title><![CDATA[추상 팩토리 패턴]]></title>
            <link>https://wallybum.github.io/2022/10/08/AbstractMethodPattern</link>
            <guid>/2022/10/08/AbstractMethodPattern</guid>
            <pubDate>Sat, 08 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[개요]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="개요">개요<a class="hash-link" href="#개요" title="제목으로 바로 가기">​</a></h2><p>팩토리 패턴 중 하나인 <strong>추상 팩토리 패턴(Abstract Factory Pattern)</strong>이며, 다른 종류로는 <strong>팩토리 패턴(Factory Pattern) (다른 이름으로는 팩토리 메서드 패턴(Factory Method Pattern)</strong> 이 있다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="추상-팩토리-패턴">추상 팩토리 패턴<a class="hash-link" href="#추상-팩토리-패턴" title="제목으로 바로 가기">​</a></h2><p>추상 팩토리 패턴은 인스턴스를 생성하는 <strong>팩토리를 추상화(인터페이스 정의 및 추상 클래스로 정의하는 등)된 형태로 정의</strong>하는 패턴이다.</p><p>구체적인 팩토리에서 구체적인 인스턴스를 만드는 과정 까지는 팩토리 메서드 패턴과 매우 유사하지만,
추상 팩토리 패턴은 클라이언트 관점에서 작성된 패턴이라고 할 수 있다.</p><p>추상 팩토리 패턴의 목적은 클라이언트 코드(팩토리에서 인스턴스를 만들어 사용하는 코드)를 인터페이스 기반으로 코딩을 할 수 있도록 한다.</p>]]></content:encoded>
            <category>디자인 패턴</category>
            <category>추상 팩토리 패턴</category>
        </item>
        <item>
            <title><![CDATA[싱글톤 패턴(Singleton Pattern)]]></title>
            <link>https://wallybum.github.io/2022/10/07/SingletonPattern</link>
            <guid>/2022/10/07/SingletonPattern</guid>
            <pubDate>Fri, 07 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[개요]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="개요">개요<a class="hash-link" href="#개요" title="제목으로 바로 가기">​</a></h2><p>오직 1개의 인스턴스만을 생성하여 사용하는 디자인 패턴이다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="사용-이유">사용 이유<a class="hash-link" href="#사용-이유" title="제목으로 바로 가기">​</a></h2><ul><li>싱글톤으로 생성된 객체는 전역성을 띄기 때문에 다른 객체와 공유가 쉽다. </li><li>불필요한 인스턴스를 생성하지 않아도 되기 때문에 메모리 자원 소모가 적다.</li><li>다음과 같은 경우에 사용할 수 있다.<blockquote><p>어떤 애플리케이션에서 사용자가 여러 환경설정 정보를 설정하려고 할 때, 설정하려는 정보수 만큼 '환경설정' 이라는 인스턴스가 존재하면 관리도 어렵고, 불필요한 메모리 자원을 사용하게 된다. 이때 '환경설정' 이라는 인스턴스를 단 한 번만 생성하여, 이 인스턴스에 여러 정보를 저장하는 방식으로 사용한다.</p></blockquote></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="싱글톤-패턴-적용-전">싱글톤 패턴 적용 전<a class="hash-link" href="#싱글톤-패턴-적용-전" title="제목으로 바로 가기">​</a></h2><ul><li>Singleton.java</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Singleton {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Settings settings = new Settings();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Settings settings1 = new Settings();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(settings == settings1); // false</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Settings.java</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Settings {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>위와 같이 new를 이용하여 만든 인스턴스들은 서로 같지 않다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="싱글톤-패턴-적용-예제">싱글톤 패턴 적용 예제<a class="hash-link" href="#싱글톤-패턴-적용-예제" title="제목으로 바로 가기">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="static-메서드를-이용한-싱글톤-패턴-적용">Static 메서드를 이용한 싱글톤 패턴 적용<a class="hash-link" href="#static-메서드를-이용한-싱글톤-패턴-적용" title="제목으로 바로 가기">​</a></h3><p>Settings에 대한 Static 필드를 만들고, 외부에서 해당 생성자에 접근할 수 있는 Static 메서드를 만든다.</p><ul><li>Singleton.java</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Singleton {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Settings settings = Settings.getInstance();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Settings settings1 = Settings.getInstance();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(settings == settings1); // true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}  </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Settings.java</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Settings {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private static Settings instance;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       instance가 null일 경우 새로운 인스턴스를 생성하여 반환하고,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       이미 있다면 기존의 인스턴스를 반환한다.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    */ </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static Settings getInstance() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (instance == null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            instance = new Settings();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return instance; </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>하지만 위 방법은 <strong>멀티 쓰레드 환경에서 안전하지 않다.</strong></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="synchronized를-이용하여-멀티-쓰레드-환경에서-안전하게-싱글톤-패턴-구현">synchronized를 이용하여 멀티 쓰레드 환경에서 안전하게 싱글톤 패턴 구현<a class="hash-link" href="#synchronized를-이용하여-멀티-쓰레드-환경에서-안전하게-싱글톤-패턴-구현" title="제목으로 바로 가기">​</a></h3><p><img loading="lazy" alt="img1" src="/assets/images/Synchronized-9ed49c56ebd900f27ed80a182003510b.png" width="1280" height="303" class="img_ev3q"></p><p>위 그림과 같이 <strong>쓰레드 1번</strong>이 빨간색 1번의 if절을 만난 뒤, instance가 null 이여서 빨간색 2번 내부로 들어갔을 때, <strong>쓰레드 2번</strong>이 파란색의 1번의 if절을 만난 뒤, instance가 null 이여서 파란색 2번 내부로 들어갈 수 도 있다.</p><p>이렇게 하면, 각 쓰레드 별로 각각의 인스턴스가 생성되기 때문에, 각 인스턴스는 같다는 것을 보장할 수 없다.</p><p>하지만, <strong>synchronized 키워드를 사용</strong>하여 <strong>getInstance()</strong> 메서드에 한번에 딱 하나의 쓰레드만 들어오도록 하면, 하나의 인스턴스가 생성되는것을 보장할 수 있다.</p><ul><li>Singleton.java</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Singleton {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Settings settings = Settings.getInstance();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Settings settings1 = Settings.getInstance();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(settings == settings1); // true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Settings.java</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Settings {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">​</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private static Settings instance;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">​</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       public static synchronized Settings getInstance() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (instance == null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            instance = new Settings();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return instance;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Synchronized의 단점은 getInstance()를 호출할 때 마다 동기화를 처리하는 작업 때문에 성능 상의 저하가 될 수 있다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="이른-초기화eager-initialization를-이용하여-멀티-쓰레드-환경에서-안전하게-싱글톤-패턴-구현">이른 초기화(eager initialization)를 이용하여 멀티 쓰레드 환경에서 안전하게 싱글톤 패턴 구현<a class="hash-link" href="#이른-초기화eager-initialization를-이용하여-멀티-쓰레드-환경에서-안전하게-싱글톤-패턴-구현" title="제목으로 바로 가기">​</a></h3><p>만약 synchronized에 대한 사용이 부담 된다면, 이른 초기화 방법을 이용할 수 있다.</p><p>Settings 클래스가 로딩되는 시점에서 static 필드가 초기화 되기 때문에 Thread-Safe 하다.</p><ul><li>Singleton.java</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Singleton {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Settings settings = Settings.getInstance();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Settings settings1 = Settings.getInstance();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(settings == settings1); // true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Settings.java</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Settings {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /* Settings 클래스가 로드되는 시점에 INSTANCE 변수가 초기화 되면서 미리 만들어 놓았기 때문에, 멀티 쓰레드 환경에서도 안전하다.*/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private static final Settings INSTNACE = new Settings();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private static Settings() { }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static Settings getInstance() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return INSTNACE;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="double-checked-locking을-이용하여-멀티-쓰레드-환경에서-안전하게-싱글톤-패턴-구현">Double Checked Locking을 이용하여 멀티 쓰레드 환경에서 안전하게 싱글톤 패턴 구현<a class="hash-link" href="#double-checked-locking을-이용하여-멀티-쓰레드-환경에서-안전하게-싱글톤-패턴-구현" title="제목으로 바로 가기">​</a></h3><p>이른 초기화 방식(eager initialization)의 경우 인스턴스를 미리 만들어 놓는데, 이 인스턴스가 로드될 때 많은 리소스를 소모하는(비용이 비싼) 인스턴스 이거나, 애플리케이션 실행 시점에서 사용하지 않는 인스턴스일 경우, 당장 사용하지도 않는 리소스를 소모하는 것이 부담될 수 있다.</p><p>또한 앞에서 작성된 Synchronized 키워드를 사용하면 <strong>동기화</strong> 를 처리하는데 비용이 신경이 쓰인다면, instance가 없을 경우 Settings 클래스에 대한 Synchronized 블럭을 생성하고,
Synchronized 블럭 내에서 instance를 생성하도록 한다. 아래와 같이 check를 2번 하기 때문에
Double Checked locking이라고 한다.</p><ul><li>Singleton.java</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Singleton {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Settings settings = Settings.getInstance();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Settings settings1 = Settings.getInstance();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(settings == settings1); // true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Settings.java</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Settings {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private static volatile Settings instance;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static Settings getInstance() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (instance == null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            synchronized (Settings.class) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                if (instance == null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    instance = new Settings();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return instance;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>쓰레드 동작은 아래 그림과 같다.<br>
<!-- -->빨간색 쓰레드가 1번에서 if 문을 만나고, instance가 null이기 때문에 2번을 수행한다.<br>
<!-- -->이때, 파란색 쓰레드가 1번의 if 문을 만나고, 파란색의 2번을 만나게 되면, 빨간색 쓰레드가 먼저 synchronized를 만났기 때문에 수행이 종료될 때 까지 대기를 하게된다. 파란색 쓰레드가 대기를 하는 동안, 빨간색 쓰레드는 3번을 수행하고, Settings 인스턴스를 생성하게 되고, 파란색 쓰레드가 그 다음 작업을 수행하려고 할 때, 이미 instance는 null이 아니기 때문에 if문을 수행하지 않는다.<br>
<!-- -->이렇게 함으로써 Thread-Safe가 된다.</p><p><img loading="lazy" alt="img2" src="/assets/images/DoubleCheckingLocking-1947a9413abbfaf290b2b0cddd7ea188.png" width="1280" height="473" class="img_ev3q"></p><p>Double Checked Locking이 <strong>synchronized getInstance()</strong>보다 성능이 좋은 이유는 다음과 같다.</p><p>(1) 자원소모적 측면
멀티쓰레드가 매우 빈번하게 일어나는 많은 트래픽을 처리하는 경우에 if문 안에 여러 쓰레드가 접근할 수 있다. 이 경우, 이미 인스턴스가 있는 경우에는 인스턴스를 즉시 반환하고, 없는 경우에만 Synchronized 블럭에 대한 자원을 소모하기 때문에 getInstance() 메서드를 호출하는 모든 쓰레드에 대해 Synchronized 자원을 소모하지 않는다. </p><p>(2) 필요로 하는 시점 선택
인스턴스를 필요로 하는 시점에 만들 수 있다.</p><p>하지만, Double Checked Locking은 복잡한 방법에 속한다. 왜 <strong>volatile</strong> 라는 키워드를 사용해야 하는지, <strong>Volatile</strong>를 사용함으로 써 Java가 메모리를 관리하는 방법을 알아야한다.</p><p>그러므로 조금 더 안전한 방법으로 싱글톤 방법을 구현한다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="static-inner-클래스를-사용하여-멀티-쓰레드-환경에서-안전하게-싱글톤-패턴-구현">Static Inner 클래스를 사용하여 멀티 쓰레드 환경에서 안전하게 싱글톤 패턴 구현<a class="hash-link" href="#static-inner-클래스를-사용하여-멀티-쓰레드-환경에서-안전하게-싱글톤-패턴-구현" title="제목으로 바로 가기">​</a></h3><p>Double Checking locking 방식이 좋기는 하지만 volatile 등 고려 해야할 것들이 많다.<br>
<!-- -->아래의 Settings 클래스를보면 Inner Class를 이용하여 싱글톤 패턴을 구현하였다.</p><ul><li>Singleton.java</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Singleton {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Settings settings = Settings.getInstance();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Settings settings1 = Settings.getInstance();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(settings == settings1); // true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Settings.java</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Settings {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private Settings() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private static class SettingsHolder {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private static final Settings INSTANCE = new Settings();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static Settings getInstance() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return SettingsHolder.INSTANCE;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>위 코드를 사용하면, <strong>getInstance()</strong> 를 호출 할때 SettingsHolder가 가지고 있는 인스턴스를 반환하게 된다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="싱글톤-패턴을-무력화-시키는-방법">싱글톤 패턴을 무력화 시키는 방법<a class="hash-link" href="#싱글톤-패턴을-무력화-시키는-방법" title="제목으로 바로 가기">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="리플렉션">리플렉션<a class="hash-link" href="#리플렉션" title="제목으로 바로 가기">​</a></h3><p>리플렉션을 이용하여 싱글톤패턴을 이용하였다 하더라도, 이를 무력화 시킬 수 있다.</p><ul><li>Singleton.java</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Singleton {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Settings settings1 = Settings.getInstance(); // 의도한대로 SettingsHolder를 통해 만들어진 인스턴스</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">​</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Constructor&lt;Settings&gt; constructor = Settings.class.getDeclaredConstructor();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        constructor.setAccessible(true);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Settings settings2 = constructor.newInstance(); // new를 이용하여 새로만든 인스턴스</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">​</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(settings1 == settings2); // false</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Settings.java</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Settings {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private Settings() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">​</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private static class SettingsHolder {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private static final Settings INSTANCE = new Settings();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">​</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static Settings getInstance() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return SettingsHolder.INSTANCE;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">​</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="직렬화--역직렬화">직렬화 &amp; 역직렬화<a class="hash-link" href="#직렬화--역직렬화" title="제목으로 바로 가기">​</a></h3><p>Java에는 Object를 파일 형태로 디스크에 저장(직렬화) 하고, 다시 읽어들이는 것(역직렬화)이 가능하다.<br>
<!-- -->만약, 직렬화, 역직렬화를 위한 <strong>Serializable</strong> 인터페이스를 implements 하고, 이 객체를 읽어들인다면, 생성자를 이용하여 인스턴스를 다시 만들기 때문에 서로 다른 객체가 된다.</p><ul><li>Singleton.java</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Singleton {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public static void main(String[] args) throws IOException, ClassNotFoundException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Settings settings = Settings.getInstance();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Settings settings1 = null;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        try (ObjectOutput out = new ObjectOutputStream(new FileOutputStream("settings.obj"))) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            out.writeObject(settings);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        try (ObjectInput in = new ObjectInputStream(new FileInputStream("settings.obj"))) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            settings1 = (Settings) in.readObject();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 역직렬화를 하게 되면 반드시 생성자를 이용하여 인스턴스를 다시 만들기 때문에 서로 다른객체가 된다.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(settings == settings1); // false</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Settings.java</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Settings implements Serializable {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private Settings() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private static class SettingsHolder {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private static final Settings INSTANCE = new Settings();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static Settings getInstance() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return SettingsHolder.INSTANCE;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>단, <strong>Serializable</strong> 인터페이스를 implements 하였다고 하더라도, 동일한 인스턴스로 유지하는 방법이 있긴한데, 그 방법은 아래와 같다. 아래와 같이 readResolve 메서드를 호출한다.</p><ul><li>Settings.java</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Settings implements Serializable {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private Settings() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private static class SettingsHolder {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private static final Settings INSTANCE = new Settings();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static Settings getInstance() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return SettingsHolder.INSTANCE;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * Serializable 인터페이스에 명시적인 Override 메서드는 아니지만,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * 이 이름으로 된 메서드가 있을 경우, 역 직렬화를 할 때 이 메서드를 사용하게 된다.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    protected Object readResolve() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return getInstance();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>위 직렬화 &amp; 역직렬화는 <strong>readResolve()</strong> 메서드를 통해 싱글톤을 보장할 수 있지만, 리플렉션의 경우 Native 코드를 이용한것이기 때문에 방어가 싱글톤 패턴을 무력화 시킬 수 있다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="enum을-이용한-싱글톤-객체-보장">Enum을 이용한 싱글톤 객체 보장<a class="hash-link" href="#enum을-이용한-싱글톤-객체-보장" title="제목으로 바로 가기">​</a></h3><p><strong>Enum</strong>을 이용하면 리플렉션에서도 싱글톤 객체를 보장할 수 있다.</p><ul><li>Singleton.java</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Singleton {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Settings settings1 = Settings.INSTANCE;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Settings settings2 = null;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Constructor&lt;?&gt;[] declaredConstructors = Settings.class.getDeclaredConstructors();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for (Constructor&lt;?&gt; constructor : declaredConstructors) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            constructor.setAccessible(true);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            settings2 = (Settings) constructor.newInstance("INSTANCE");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(settings1 == settings2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Settings.java</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public enum Settings {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    INSTANCE;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Settings 클래스가 엄청 간단해졌다. 그리고 위 Singleton클래스를 run 하게되면 다음과 같은 오류가 발생하는데, 이유는 Enum은 DeclaredConstructors를 통한 리플렉션은 적용되지 않기 때문이다.
<img loading="lazy" alt="img3" src="/assets/images/EnumTypeError-77b68ee946d0ffdad24a0685ac5d41c7.png" width="1280" height="87" class="img_ev3q"></p><p>Constructors의 newInstance() 메서드에 다음과 같이 Enum은 리플렉션을 허용하지 않도록 되어있다.
<strong>(Modifier.ENUM)문구</strong></p><p><img loading="lazy" alt="img4" src="/assets/images/NotAllowReflectionAsEnum-4a72e7521aa979f5249fd5396a002eaa.png" width="1089" height="705" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="정리">정리<a class="hash-link" href="#정리" title="제목으로 바로 가기">​</a></h2><ol><li>Java에서 Enum을 사용하지 않고 싱글톤 패턴을 구현하는 방법은?</li></ol><ul><li><strong>static 메서드</strong>를 이용한 싱글톤 패턴 구현</li><li><strong>Synchronized 키워드를 이용</strong>하여 멀티쓰레드 환경에서 안전한 방법으로 싱글톤 패턴 구현</li><li><strong>이른 초기화(eager initialization)을 이용</strong>하여 멀티 쓰레드 환경에서 안전한 방법으로 싱글톤 패턴 구현</li><li>Synchronized와 이른 초기화 방식을 대신하여 <strong>Double Checked Locking</strong> 방법을 이용</li><li>복잡한 Double Checked Locking방법 대신 <strong>Static Inner 클래스 사용</strong>하기</li></ul><ol start="2"><li>private 생성자와 static 메서드를 사용하는 방법의 단점은?</li></ol><ul><li>private 생성자와 static 메서드를 사용할 경우, 멀티쓰레드에 안전하지 않다.</li></ul><ol start="3"><li>Enum을 사용해 싱글톤 패턴을 사용하는 방법의 장점과 단점은?</li></ol><ul><li><p>장점 : Enum으로는 리플렉션을 이용한 방법으로도 인스턴스를 생성할 수 없기 때문에 유일한 인스턴스임이 보장된다. 또한 Enum클래스는 내부적으로 Serializable를 구현하기 때문에 직렬화와 역직렬화 방법에도 안전하다.</p></li><li><p>단점 : Enum은 클래스가 로딩되는 순간 인스턴스가 미리 생성된다.</p></li></ul><ol start="4"><li>static inner 클래스를 사용해 싱글톤 패턴을 구현해보자.</li></ol><ul><li>Singleton.java</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Singleton {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Settings settings = Settings.getInstance();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Settings settings1 = Settings.getInstance();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(settings == settings1); // true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Settings.java</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Settings {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private Settings() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private static class SettingsHolder {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private static final Settings INSTANCE = new Settings();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static Settings getInstance() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return SettingsHolder.INSTANCE;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
            <category>디자인 패턴</category>
            <category>싱글톤 패턴</category>
        </item>
        <item>
            <title><![CDATA[팩토리 메서드 패턴]]></title>
            <link>https://wallybum.github.io/2022/08/10/FactoryMethodPattern</link>
            <guid>/2022/08/10/FactoryMethodPattern</guid>
            <pubDate>Wed, 10 Aug 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[개요]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="개요">개요<a class="hash-link" href="#개요" title="제목으로 바로 가기">​</a></h2><p>팩토리 메서드 패턴을 줄여서 <strong>팩토리(Factory Pattern)</strong> 이라고 하며, 다른 종류로는 <strong>추상 팩토리 패턴(Abstract Factory Pattern)</strong>이 있다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="팩토리-메서드-패턴">팩토리 메서드 패턴<a class="hash-link" href="#팩토리-메서드-패턴" title="제목으로 바로 가기">​</a></h2><p>팩토리 매서드 패턴은 생성 패턴(Creational Pattern)의 종류 중 하나이며, 자식(하위) 클래스가 어떤 객체를 생성할지 결정하며, 부모 클래스는 자식 클래스로 부터 전달된 인풋에 따라 객체를 생성하여 반환하도록 설계된 패턴이다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="사용-이유">사용 이유<a class="hash-link" href="#사용-이유" title="제목으로 바로 가기">​</a></h2><p>그러면 왜 저런 패턴을 써야할까? 간단하게 치킨(Chicken)을 예로 들겠다.</p><p>고객이 치킨을 주문 하면 주문을 받고, 치킨의 이름 / 색깔 / 가격등을 기입하고 고객에게 전달한다는 예제 코드이다.</p><ul><li>Customer.java</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Customer {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Chicken honeyCombo = ChickenFactory.orderChicken("허니콤보", "honey@gmail.com");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(honeyCombo);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("=====================================================");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Chicken redCombo = ChickenFactory.orderChicken("레드콤보", "red@gmail.com");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(redCombo);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Chicken.java</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Chicken {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private String name;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private String price;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private String color;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public String getName() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return name;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void setName(String name) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.name = name;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public String getPrice() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return price;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void setPrice(String price) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.price = price;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public String getColor() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return color;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void setColor(String color) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.color = color;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public String toString() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return "Chicken [name=" + name + ", price=" + price + "]";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>ChickenFactory</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class ChickenFactory {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static Chicken orderChicken(String name, String email) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (name == null || name.isEmpty()) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            throw new IllegalArgumentException("치킨 이름을 지어주세요.");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (email == null || email.isEmpty()) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            throw new IllegalArgumentException("연락처를 남겨주세요.");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        prepareFor(name);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Chicken chicken = new Chicken();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        chicken.setName(name);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 치킨 색깔</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (name.equalsIgnoreCase("허니콤보")) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            chicken.setColor("gold");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } else if (name.equalsIgnoreCase("레드콤보")) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            chicken.setColor("red");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 치킨 가격</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (name.equalsIgnoreCase("허니콤보")) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            chicken.setPrice("18,000원");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } else if (name.equalsIgnoreCase("레드콤보")) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            chicken.setPrice("19,000원");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // notify</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        sendEmailTo(email, chicken);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return chicken;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private static void sendEmailTo(String email, Chicken chicken) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(chicken.getName() + "를 다 만들었습니다.");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private static void prepareFor(String name) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(name + " 만들 준비 하는 중...");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>지금은 메뉴가 두 가지 이지만, '블랙시크릿오리지날' 이라는 신 메뉴가 나왔다고 가정하고, 가격은 3만원이라고 하자. 그리고, '블랙시크릿오리지날' 메뉴를 주문한 고객이 있다면
Customer 클래스에서는 ChickenFactory로 요청을 할 것이고, 현재 상황에서 ChickenFactory 클래스는 다음과 같이 수정되어야 할 것이다.</p><ul><li>ChickenFactory.java(신 메뉴 추가 시)</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class ChickenFactory {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static Chicken orderChicken(String name, String email) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       ... 생략</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 치킨 색깔</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (name.equalsIgnoreCase("허니콤보")) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            chicken.setColor("gold");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } else if (name.equalsIgnoreCase("레드콤보")) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            chicken.setColor("red");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }  else if (name.equalsIgnoreCase("블랙시크릿오리지날")) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            chicken.setColor("black");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 치킨 가격</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (name.equalsIgnoreCase("허니콤보")) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            chicken.setPrice("18,000원");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } else if (name.equalsIgnoreCase("레드콤보")) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            chicken.setPrice("19,000원");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }else if (name.equalsIgnoreCase("블랙시크릿오리지날")) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            chicken.setPrice("23,000원");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ... 생략</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ... 생략</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>결과</p></blockquote><div class="language-console codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-console codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">허니콤보 만들 준비 하는 중...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">허니콤보를 다 만들었습니다.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Chicken [name=허니콤보, price=18,000원]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">=====================================================</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">레드콤보 만들 준비 하는 중...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">레드콤보를 다 만들었습니다.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Chicken [name=레드콤보, price=19,000원]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>객체지향 원칙에는 <strong>Open-closed priniple</strong> 라는 용어가 있는데, 확장에는 열려있고, 변경에는 닫혀있어야 한다는 뜻이다. 위와 같이 어떤 요구사항이 변경됨으로써 기존 코드가 변경이 되는(= 변경에 닫혀있지 않은) 상태가 되면 안된다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="팩토리-메서드-패턴-적용">팩토리 메서드 패턴 적용<a class="hash-link" href="#팩토리-메서드-패턴-적용" title="제목으로 바로 가기">​</a></h2><p>먼저 ChickenFactory 클래스가 하는 업무가 너무 많다.</p><ul><li>치킨 이름의 누락여부 체크 </li><li>연락처 누락 여부 체크</li><li>치킨 이름 정하기</li><li>치킨 색깔 정하기</li><li>치킨 가격 정하기</li><li>고객에게 알리기</li></ul><p>여기서 공통으로 뺄 수있는 항목들만 ChickenFactory 클래스에 유지 시키고 일부를 수정한다.</p><ul><li>ChickenFactory.java</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public interface ChickenFactory {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    default Chicken orderChicken(String name, String email) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        validate(name, email); // 기존의 치킨 이름과 연락처 누락 여부를 담당하는 메서드</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        prepareFor(name);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Chicken chicken = cookChicken();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        sendEmailTo(email, chicken);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return chicken;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private void validate(String name, String email) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (name == null || name.isEmpty()) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            throw new IllegalArgumentException("치킨 이름을 지어주세요.");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (email == null || email.isEmpty()) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            throw new IllegalArgumentException("연락처를 남겨주세요.");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private void prepareFor(String name) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(name + " 만들 준비 하는 중...");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Chicken cookChicken(); // Private Method나 Default Method로 정의하지 않았기 때문에 반드시 하위클래스가 정의를 해줘야한다.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private void sendEmailTo(String email, Chicken chicken) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(chicken.getName() + "를 다 만들었습니다.");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>이제 허니콤보든 레드콤보든 어떤 치킨이든 주문받고, 유효성 검증하고, 고객에게 알리는 역할은 ChickenFactory클래스에서 하고, 허니콤보를 생성할 땐 허니콤보에만 집중하면 되고, 레드콤보를 생성할 땐 레드콤보에만 집중하면 된다.</p><p>아래와 같이 HoneyComboFactory, RedComboFactory 클래스를 새로 생성하고, ChickenFactory 인터페이스를 implements 하도록 작성한다. 그리고, 인터페이스에서 정의되지않은 cookChicken()을 아래 두 클래스에서 호출하도록한다.</p><blockquote><p>HoneyComboFactory.java</p></blockquote><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class HoneyComboFactory implements ChickenFactory{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public Chicken cookChicken() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return new HoneyCombo();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 허니콤보를 만드는 공장만의 새로운 무언가가 생길 수 있음.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>RedComboFactory.java</p></blockquote><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class RedComboFactory implements ChickenFactory{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public Chicken cookChicken() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return new RedCombo();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 레드콤보를 만드는 공장만의 새로운 무언가가 생길 수 있음.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>위 코드로 보아 HoneyComboFactory는 허니콤보를, RedComboFactory는 레드 콤보를 요리 한다는것을 알 수 있다.</p><p>이제 각 치킨별 이름, 색갈 가격을 나타내는 클래스를 생성한다.</p><blockquote><p>HoneyCombo.java</p></blockquote><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class HoneyCombo extends Chicken{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public HoneyCombo(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        setName("허니콤보");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        setColor("gold");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        setPrice("18,000원");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>RedCombo.java</p></blockquote><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> public RedCombo(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        setName("레드콤보");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        setColor("red");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        setPrice("19,000원");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>그리고 이를 주문하는 Customer 클래스를 다음과 같이 수정한다.</p><blockquote><p>Customer.java</p></blockquote><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Customer {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Chicken honeyCombo = new HoneyComboFactory().orderChicken("허니콤보", "honey@gmail.com");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(honeyCombo);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("=====================================================");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Chicken redCombo = new RedComboFactory().orderChicken("레드콤보", "red@gmail.com");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(redCombo);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>위와 같이 수정하였을 경우 새로운 치킨이 추가되면, 그 치킨의 Factory와 그 치킨의 이름, 색깔, 가격을 지정할 클래스만 생성하면 된다.</p><p>하지만 새로운 치킨이 추가될 때마다 Client 코드(Customer 클래스)는 계속 변경이 된다. 만약 새로운 치킨을 주문하고 싶다면, 그 치킨을 주문하기 위한 Factory 클래스를 알아야만 한다.</p><p>아래와 같이 HoneyComboFactory 클래스와 RedComboFactory클래스를 의존성 주입을 함으로써 Client 변경을 최소화 할 수 있다.</p><blockquote><p>Customer.java</p></blockquote><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Customer {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Customer customer = new Customer();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        customer.print(new HoneyComboFactory(), "허니콤보", "honey@gmail.com");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("=====================================================");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        customer.print(new RedComboFactory(), "레드콤보", "red@gmail.com");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private void print(ChickenFactory chickenFactory, String name, String email) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(chickenFactory.orderChicken(name,email));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>팩토리 메서드 패턴을 적용한 뒤 다이어그램은 아래와 같다.</p><p><img loading="lazy" alt="img1" src="/assets/images/FactoryMethodPatternDiagram-d89e85a956ab3c0884e24456c86b6cf4.png" width="860" height="770" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="주의점">주의점<a class="hash-link" href="#주의점" title="제목으로 바로 가기">​</a></h2><p>위 코드는 JAVA 11을 기준으로 작성되었다. 만약 JAVA 8을 사용한다면 인터페이스(ChickenFactory.java)에 private method를 사용할 수 없다.</p><p>인터페이스에 Private Method는 JAVA 9부터 사용할 수 있다.</p><p>JAVA 8를 사용한다면 다음과 같이 수정한다.</p><p>ChickenFactory 클래스에서 private 메서드로 작성한것들을 선언부만 남긴다.</p><blockquote><p>ChickenFactory.java</p></blockquote><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public interface ChickenFactory {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    default Chicken orderChicken(String name, String email) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        validate(name, email);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        prepareFor(name);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Chicken chicken = cookChicken();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        sendEmailTo(email, chicken);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return chicken;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    void validate(String name, String email) ;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    void prepareFor(String name);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Chicken cookChicken();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    void sendEmailTo(String email, Chicken chicken);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>그리고 기존 ChickenFactory 인터페이스에서 구현해놨던 부분을 DefaultChickenFactory 라는 추상 클래스를 생성하여 아래와 같이 작성한다.</p><blockquote><p>DefaultChickenFactory.java</p></blockquote><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public abstract class DefaultChickenFactory implements ChickenFactory {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void prepareFor(String name) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(name + " 만들 준비 하는 중...");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void sendEmailTo(String email, Chicken chicken) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(chicken.getName() + "를 다 만들었습니다.");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void validate(String name, String email) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (name == null || name.isEmpty()) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            throw new IllegalArgumentException("치킨 이름을 지어주세요.");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (email == null || email.isEmpty()) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            throw new IllegalArgumentException("연락처를 남겨주세요.");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>그리고 ChickenFactory를 implements 하도록 작성한 HoneyComboFactory 클래스와 RedComboFactory 클래스들을 DefaultChickenFactory 클래스를 상속받도록 수정한다.</p><blockquote><p>HoneyComboFactory.java</p></blockquote><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class HoneyComboFactory extends DefaultChickenFactory {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public Chicken cookChicken() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return new HoneyCombo();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 허니콤보를 만드는 공장만의 새로운 무언가가 생길 수 있음.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>RedComboFactory.java</p></blockquote><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class RedComboFactory extends DefaultChickenFactory {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public Chicken cookChicken() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return new RedCombo();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 레드콤보를 만드는 공장만의 새로운 무언가가 생길 수 있음.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="팩토리-메서드-패턴-장점">팩토리 메서드 패턴 장점<a class="hash-link" href="#팩토리-메서드-패턴-장점" title="제목으로 바로 가기">​</a></h2><ul><li>기존 코드를 수정하지 않고, 새로운 인스턴스를 다른 방법으로 확장이 가능하다. Creater와 Factory간의 관계가 느슨한 결합(Loose coupling)으로 되어있기 때문이다. 이로 인해 확장에는 열려있고 변경에 닫혀있는 객체 지향 원칙을 준수할 수 있다.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="팩토리-메서드-패턴-단점">팩토리 메서드 패턴 단점<a class="hash-link" href="#팩토리-메서드-패턴-단점" title="제목으로 바로 가기">​</a></h2><p>각자의 역할이 나뉘어지다보니 클래스가 많아지는 단점이 있다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="정리">정리<a class="hash-link" href="#정리" title="제목으로 바로 가기">​</a></h2><ol><li><p>확장에는 열려있고 변경에 닫혀있는 객체 지향 원칙 이란?</p><blockquote><p>기존 코드를 변경하지 않으면서, 새로운 기능을 얼마든지 확장할 수 있는 구조로 만드는것을 의미한다.</p></blockquote></li><li><p>Java 8에 추가된 default 메서드란?</p><blockquote><p>Java 8 이전에는 인터페이스에 추상 메서드만 정의할 수 있었고, 이 인터페이스를 구현하는 클래스에서 해당 메서드를 구현하거나 추상 클래스로 만드는 방법 뿐이였으나, Java 8부터는 인터페이스에 기본 구현체를 만들 수 있게 되어, 그 인터페이스를 구현하는 클래스 혹은 그 인터페이스를 상속받은 또 다른 인터페이스도 해당 기능을 사용할 수 있게 되었다.</p></blockquote></li></ol>]]></content:encoded>
            <category>디자인 패턴</category>
            <category>팩토리 메서드 패턴</category>
        </item>
        <item>
            <title><![CDATA[PostgreSQL-11-Procedure-생성]]></title>
            <link>https://wallybum.github.io/2022/07/29/PostgreSQL-11-Procedure-생성</link>
            <guid>/2022/07/29/PostgreSQL-11-Procedure-생성</guid>
            <pubDate>Fri, 29 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[개요]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="개요">개요<a class="hash-link" href="#개요" title="제목으로 바로 가기">​</a></h2><p>PostgreSQL DBMS 여러 버전에서 Function과 Procedure를 생성하는 작업을 할 일이 있었다.
Function과 Procedure 생성은 공식문서를 통해 생성 방법을 쉽게 확인할 수 있었다.
중요한 점은 PostgreSQL 11버전부터 <strong>Create Procedure</strong> 구문을 통해 Procedure 생성을 지원한다는 문구가 이목을 끌었다.</p><p><strong>'그러면 PostgreSQL 11 이전 버전에서는 Procedure를 어떻게 생성하지? 설마 지원을 안 했나?'</strong> </p><p>라는 생각에서 확인하고 기록을 남기려고 한다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="데이터베이스-환경">데이터베이스 환경<a class="hash-link" href="#데이터베이스-환경" title="제목으로 바로 가기">​</a></h2><ul><li>Postgresql 9.2, PostgreSQL 11 이상</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="function과-procedure">Function과 Procedure<a class="hash-link" href="#function과-procedure" title="제목으로 바로 가기">​</a></h2><p>Function과 Procedure에 대한 차이를 조사하다 보면, <strong>Function은 반환 값이 있으며, Procedure는 반환 값이 없다.</strong> 라는 글을 자주 접할 수 있는데, 결론부터 말하면 이 내용은 완전히 잘못된 정의이다. <strong>Function과 Procedure 둘 다 반환 값을 가질 수 있다.</strong></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="function-생성-예제">Function 생성 예제<a class="hash-link" href="#function-생성-예제" title="제목으로 바로 가기">​</a></h3><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">-- 새 펑션</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">FUNCTION</span><span class="token plain"> addfunc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a </span><span class="token keyword" style="color:#00009f">INTEGER</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> b </span><span class="token keyword" style="color:#00009f">INTEGER</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">RETURNS</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">INTEGER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$$ </span><span class="token keyword" style="color:#00009f">BEGIN</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">RETURN</span><span class="token plain"> a</span><span class="token operator" style="color:#393A34">+</span><span class="token plain">b</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">END</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> $$</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">LANGUAGE</span><span class="token plain"> PLPGSQL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">-- 새 펑션</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">ON</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">FUNCTION</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">public</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">addfunc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">INTEGER</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">INTEGER</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">IS</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'펑션 주석'</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="procedure-생성-예제-반환-값이-없는-경우">Procedure 생성 예제 (반환 값이 없는 경우)<a class="hash-link" href="#procedure-생성-예제-반환-값이-없는-경우" title="제목으로 바로 가기">​</a></h3><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">TABLE</span><span class="token plain"> TB_PROCEDURE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     COL </span><span class="token keyword" style="color:#00009f">VARCHAR</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">PROCEDURE</span><span class="token plain"> insert_data</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a </span><span class="token keyword" style="color:#00009f">integer</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> b </span><span class="token keyword" style="color:#00009f">integer</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">LANGUAGE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">SQL</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> $$</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">INSERT</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">INTO</span><span class="token plain"> TB_PROCEDURE </span><span class="token keyword" style="color:#00009f">VALUES</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">INSERT</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">INTO</span><span class="token plain"> TB_PROCEDURE </span><span class="token keyword" style="color:#00009f">VALUES</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">b</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$$</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="procedure-생성-예제-반환-값이-있는-경우-postgresql-11-이후">Procedure 생성 예제 (반환 값이 있는 경우, PostgreSQL 11 이후)<a class="hash-link" href="#procedure-생성-예제-반환-값이-있는-경우-postgresql-11-이후" title="제목으로 바로 가기">​</a></h3><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">create</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">procedure</span><span class="token plain"> increase</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">inout</span><span class="token plain"> i </span><span class="token keyword" style="color:#00009f">integer</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">LANGUAGE</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'plpgsql'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> $$</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">begin</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">end</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$$</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">call</span><span class="token plain"> increase</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>위 예시를 통해 Procedure도 반환값을 가질 수 있다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="function과-procedure의-차이">Function과 Procedure의 차이<a class="hash-link" href="#function과-procedure의-차이" title="제목으로 바로 가기">​</a></h2><p>그렇다면 왜 사람들은 <strong>Function은 반환 값이 있으며, Procedure는 반환 값이 없다.</strong> 라는 결론을 낸 것일까? 라는 생각을 해보았다. 사람들이 이러한 결론에 도달하게 된 어떠한 게시물을 기반으로 검증 없이 Copy &amp; Paste를 했을 것이라고 생각하진 않는다. 추측 하건대, 아래의 두 이유라고 생각한다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="create-procedure-구문의-부재">Create Procedure 구문의 부재<a class="hash-link" href="#create-procedure-구문의-부재" title="제목으로 바로 가기">​</a></h3><p>다른 RDBMS들은 과거부터 Create Function 구문과 Create Procedure 구문을 각각 지원하였다.
하지만 PostgreSQL의 경우 PostgreSQL 11버전부터 Create Procedure를 지원하였다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="trigger-procedure를-이용한-절차-수행">Trigger Procedure를 이용한 절차 수행<a class="hash-link" href="#trigger-procedure를-이용한-절차-수행" title="제목으로 바로 가기">​</a></h3><p>PostgreSQL 11 이전에는 공식적으로 Function만 존재하였다. 하지만 어떠한 절차를 수행하고자 할 때, PostgreSQL에서는 트리거 프로시저(Trigger Procedure)라는 기능을 제공하였다.</p><p>트리거 프로시저는 PL/pgSQL을 사용하며, <strong>CREATE FUNCTION</strong> 키워드를 사용하며, 반환 값이 trigger인 함수로 선언한다고 안내되어있다. 기능상으로는 다른 RDBMS와 같이 절차(Procedure)를 수행하지만, <strong>CREATE FUNCTION</strong> 문법을 사용한다는 점, 그리고 일반적인 FUNCTION을 생성하는 구문의 문법적인 차이가 없다.</p><p>PostgreSQL 공식문서에서도 이러한 내용은 다루고 있지 않으며, 트랜잭션 처리를 제외하고는 Function과 Procedure의 차이가 없기 때문에 PostgreSQL을 사용하는 유저들은 Function = Procedure라고 생각 하였을 것이라고 추측한다.</p><p>이와 관련해서 조금 더 찾아본 결과, <a href="https://dba.stackexchange.com/questions/2357/what-are-the-differences-between-stored-procedures-and-stored-functions" target="_blank" rel="noopener noreferrer">여기</a>에서는 이 주제와 관련하여 저명성이 높은 사람들의 여러 의견을 확인할 수 있었고, 과거에는 Function과 Procedure를 동의어로 취급했다는 내용도 확인할 수 있었다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="결론">결론<a class="hash-link" href="#결론" title="제목으로 바로 가기">​</a></h2><p>PostgreSQL 11 이전 / 이후 버전에서 펑션과 프로시저를 조회하는 쿼리를 작성하고자 한다.
PostgreSQL 11 이후부터는 pg_proc 테이블에 <strong>prokind</strong>라는 컬럼이 추가되었는데, 사용자가 <strong>CREATE FUNCTION</strong>을 사용하였다면 'f'가 <strong>Create Procedure</strong>를 사용하였다면 'p' 값이 추가된다.
즉, prokind 컬럼에 조건을 걸어 펑션, 프로시저를 명확히 필터링하여 조회할 수 있다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="postgresql-11-이상버전에서-펑션-조회">PostgreSQL 11 이상버전에서 펑션 조회<a class="hash-link" href="#postgresql-11-이상버전에서-펑션-조회" title="제목으로 바로 가기">​</a></h3><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">select</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ns</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">nspname </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> schemaName</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   </span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">proname </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> routine_name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   pg_get_functiondef</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">oid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> definition</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   pg_get_function_arguments</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">oid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> arguments</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   lang</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">lanname </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> lang_name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   obj_description</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">oid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">comment</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   </span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prokind </span><span class="token comment" style="color:#999988;font-style:italic">-- 추가됨</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   provolatile</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   procost</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   prorows</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   prosecdef</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   proleakproof</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   proisstrict</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   proretset</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   </span><span class="token keyword" style="color:#00009f">type</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">typname </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> retuntype</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> pg_proc </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">proc</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> pg_namespace </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> ns </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pronamespace </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ns</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">oid</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> pg_language </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> lang </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prolang </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> lang</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">oid</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> pg_type </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prorettype </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">oid</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> nspname</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'{스키마 명}'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prokind </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'f'</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">-- 프로시저 조회 시 prokind 값이 f</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="postgresql-11-이상버전에서-프로시저-조회">PostgreSQL 11 이상버전에서 프로시저 조회<a class="hash-link" href="#postgresql-11-이상버전에서-프로시저-조회" title="제목으로 바로 가기">​</a></h3><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">select</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ns</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">nspname </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> schemaName</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   </span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">proname </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> routine_name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   pg_get_functiondef</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">oid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> definition</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   pg_get_function_arguments</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">oid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> arguments</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   lang</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">lanname </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> lang_name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   obj_description</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">oid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">comment</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   </span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prokind </span><span class="token comment" style="color:#999988;font-style:italic">-- 추가됨</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   provolatile</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   procost</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   prorows</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   prosecdef</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   proleakproof</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   proisstrict</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   proretset</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   </span><span class="token keyword" style="color:#00009f">type</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">typname </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> retuntype</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> pg_proc </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">proc</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> pg_namespace </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> ns </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pronamespace </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ns</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">oid</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> pg_language </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> lang </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prolang </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> lang</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">oid</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> pg_type </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prorettype </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">oid</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> nspname</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'{스키마 명}'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prokind </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'p'</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">-- 프로시저 조회 시 prokind 값이 p</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>하지만, PostgreSQL 11 이전에는 prokind 컬럼도 없고, <strong>Create Procedure</strong> 구문도 없었기 때문에 prokind 통해 명확히 Function과 Procedure를 구분할 수는 없으나, 많은 사람들이 PostgreSQL 11 이전에서는 <strong>Create Function</strong> 구문을 이용하여 반환 값이 trigger인 트리거 프로시저를 사용하였다는 점을 통해 다음의 조회 쿼리를 통해 프로시저 정보를 조회할 수 있을 것이라 생각한다. (단, 기준 점 자체가 모호하였던 과거이기에 100% 확실하지는 않다.)</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="postgresql-11-이전-버전에서-펑션-조회">PostgreSQL 11 이전 버전에서 펑션 조회<a class="hash-link" href="#postgresql-11-이전-버전에서-펑션-조회" title="제목으로 바로 가기">​</a></h3><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">select</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ns</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">nspname </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> schemaName</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   </span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">proname </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> routine_name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   pg_get_functiondef</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">oid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> definition</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   pg_get_function_arguments</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">oid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> arguments</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   lang</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">lanname </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> lang_name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   obj_description</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">oid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">comment</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   proiswindow </span><span class="token comment" style="color:#999988;font-style:italic">-- 11이상 버전에서는 사라진 컬럼</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   provolatile</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   procost</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   prorows</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   prosecdef</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   proleakproof</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   proisstrict</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   proretset</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   </span><span class="token keyword" style="color:#00009f">type</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">typname </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> returntype</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> pg_proc </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">proc</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> pg_namespace </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> ns </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pronamespace  </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ns</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">oid</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> pg_language </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> lang </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prolang </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> lang</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">oid</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> pg_type </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prorettype </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">oid</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> nspname </span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'{스키마 명}'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">proisagg </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="postgresql-11-이전-버전에서-프로시저-조회">PostgreSQL 11 이전 버전에서 프로시저 조회<a class="hash-link" href="#postgresql-11-이전-버전에서-프로시저-조회" title="제목으로 바로 가기">​</a></h3><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">select</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ns</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">nspname  </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> schemaName</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   </span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">proname  </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> routine_name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   pg_get_functiondef</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">oid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> definition</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   pg_get_function_arguments</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">oid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> arguments</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   lang</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">lanname </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> lang_name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   obj_description</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">oid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">comment</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   proiswindow</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   provolatile</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   procost</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   prorows</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   prosecdef</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   proleakproof</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   proisstrict</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   proretset</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   </span><span class="token keyword" style="color:#00009f">type</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">typname </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> returntype</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> pg_proc </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">proc</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> pg_namespace </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> ns </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pronamespace  </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ns</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">oid</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> pg_language </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> lang </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prolang </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> lang</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">oid</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> pg_type </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">proc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prorettype </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">oid</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> nspname </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'{스키마 명}'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">typname </span><span class="token operator" style="color:#393A34">in</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'trigger'</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
            <category>Database</category>
            <category>PostgreSQL</category>
            <category>Function</category>
            <category>Procedure</category>
        </item>
        <item>
            <title><![CDATA[Eclipse-Help-Server-구현기]]></title>
            <link>https://wallybum.github.io/2022/07/04/Eclipse-Help-Server-구현기</link>
            <guid>/2022/07/04/Eclipse-Help-Server-구현기</guid>
            <pubDate>Mon, 04 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Eclipse Help Server 구현기]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="eclipse-help-server-구현기">Eclipse Help Server 구현기<a class="hash-link" href="#eclipse-help-server-구현기" title="제목으로 바로 가기">​</a></h2><p>Eclipse는 사용자들이 Eclipse 사용법을 익히는데 도움을 주는 도움말 문서가 있다.
이 도움말 문서는 pdf형태의 문서파일이 아닌 자체 도움말 서버를 운영하고있다.
Eclipse Plug-in을 개발하는 입장에서 Eclipse의 도움말 문서 형식에 따라 개발하는 Plug-in에 대한 도움말을 제공하고자
로컬 도움말 서버를 구현해보고자 한다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="서버-환경">서버 환경<a class="hash-link" href="#서버-환경" title="제목으로 바로 가기">​</a></h2><ul><li>OS : MacOS Montery(12.4)</li><li>Java : 8</li><li>Eclipse : 4.9(2018-09)</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="도움말-프로젝트-구성">도움말 프로젝트 구성<a class="hash-link" href="#도움말-프로젝트-구성" title="제목으로 바로 가기">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="plug-in-프로젝트-생성">Plug-in 프로젝트 생성<a class="hash-link" href="#plug-in-프로젝트-생성" title="제목으로 바로 가기">​</a></h3><p>Eclipse에서 Plug-in 프로젝트를 생성한다. Plug-in Project를 생성하기 위해서는Eclipse Modeling Tools 패키지를 이용해야 한다.</p><p><img loading="lazy" alt="img1" src="/assets/images/01-Create_Plug-in_Project-d3e3c1d47255357404f7d092f1ec69af.png" width="1404" height="1484" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="dependency-추가">Dependency 추가<a class="hash-link" href="#dependency-추가" title="제목으로 바로 가기">​</a></h3><p>앞에서 생성한 프로젝트의 plugin.xml 파일의 Dependencies 탭에서 아래 그림과 같이 <strong>org.eclipse.help</strong> 디펜던시를 추가한다.</p><p><img loading="lazy" alt="img2" src="/assets/images/02-Add_Dependency-ecab42fb42fcf1f779e808ddedd0b245.png" width="2248" height="1016" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="extension-설정">Extension 설정<a class="hash-link" href="#extension-설정" title="제목으로 바로 가기">​</a></h3><p>앞에서 생성한 프로젝트의 plugin.xml 파일의 Extensions 탭에서 아래 그림과 같이 <strong>org.eclipse.help.toc</strong> extension을 추가한다.</p><p><img loading="lazy" alt="img3" src="/assets/images/03-Add_Extension_Point-152906c2ed386403304d2cfbfcb50f1d.png" width="2108" height="1018" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="toc-설정">TOC 설정<a class="hash-link" href="#toc-설정" title="제목으로 바로 가기">​</a></h3><p>추가된 org.eclipse.help.toc extension을 선택하고 우클릭 &gt; toc를 클릭하여 toc를 추가한다.
추가된 toc를 선택하고 우측 Extension Element Details 메뉴에서 toc로 사용할 파일의 경로를 미리 지정한다. 본인 편하게 toc/toc.xml로 하였다.
<img loading="lazy" alt="img4" src="/assets/images/04-TOC_Setting-2098373aef11b76db6a2f120196bd950.png" width="2116" height="1014" class="img_ev3q"></p><p>toc.xml 파일을 생성하고 우클릭 &gt; Open With... &gt; Table of Contents Editor 에디터로 열면 아래 그림과 같이 전용 Editor를 볼 수 있다.</p><p>전용 에디터로 열면 처음에는 <strong>An error was encountered while parsing the table of contents' XML file</strong> 이라는 오류가 발생하는데, 이는 toc를 구성하는 가장 최상단의 객체(Book)에 대한 정보가 없기 때문이다. <strong>Book Details</strong>에서 Name 필드와 Location 필드를 구성해주고, xml 파일을 다시 열면된다.</p><p>그 다음 Add Topic를 눌러 Topic를 추가하고 적당한 이름을 작성한다.</p><p><img loading="lazy" alt="img5" src="/assets/images/05-TOC_Guide1-0b34559eca568506eec6957222548850.png" width="2352" height="1008" class="img_ev3q"></p><p><img loading="lazy" alt="img6" src="/assets/images/06-TOC_Guide2-b0e4654b65df0ca69cb9de38563c7b29.png" width="2352" height="1008" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="프로젝트-export">프로젝트 Export<a class="hash-link" href="#프로젝트-export" title="제목으로 바로 가기">​</a></h3><p>프로젝트 우클릭 &gt; Export &gt; Plug-on Development &gt; Deployable plug-ins and fragments를 선택한다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="infocenter-개요">Infocenter 개요<a class="hash-link" href="#infocenter-개요" title="제목으로 바로 가기">​</a></h2><p>Infocenter는 사용자에게 <strong>도움말 컨텐츠</strong>를 표시하는 역할을 하는 구성 요소이다. 도움말 컨첸츠는 Eclipse에서 사용자를 위해 지원하는 기능 중 하나이며, 일반적으로 <strong>도움말 컨텐츠</strong> 가 주요 기능이다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="infocenter-eclipse-다운로드">Infocenter Eclipse 다운로드<a class="hash-link" href="#infocenter-eclipse-다운로드" title="제목으로 바로 가기">​</a></h3><p><a href="https://archive.eclipse.org/eclipse/downloads/" target="_blank" rel="noopener noreferrer">여기</a>에서 Archived된 버전의 Eclipse를 선택 한다.</p><p>버전을 선택하였다면, 스크롤 내려 Platform Runtime Binary 항목에서 운영체제와 CPU 아키텍처와 호환되는 Eclipse를 다운로드 한다.
<img loading="lazy" alt="img7" src="/assets/images/07-Platform_Runtime_Binary-2f258609300526cb9d2d77a95bf0194f.png" width="3108" height="584" class="img_ev3q"></p><p>참고로, 이 문서를 작성하는 시점에서 크롬 브라우저에서는 다운로드가 진행되지 않는다.
이유는 Archive 사이트는 SSL이 적용되어 https 프로토콜을 사용하지만, Archive 사이트 내에 연결되어있는 링크는 http로 되어 있다. Chrome 80버전 이후로 https 홈페이지에서 http 자원 접근을 차단하기 때문이다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="windows-infocenter-구성">Windows Infocenter 구성<a class="hash-link" href="#windows-infocenter-구성" title="제목으로 바로 가기">​</a></h3><ol><li>적절한 경로에 Infocenter 라는 디렉터리를 하나 만든다.</li><li>다운받은 파일을 압축 해제 하고, 결과물을 Infocenter 디렉터리로 옮긴다.</li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="macos-infocenter-구성">MacOS Infocenter 구성<a class="hash-link" href="#macos-infocenter-구성" title="제목으로 바로 가기">​</a></h3><ol><li>적절한 경로에 Infocenter 라는 디렉터리를 하나 만든다.</li><li>dmg 확장자 열기 후 Eclipse.app 파일에 대해 '패키지 내용 보기'를 클릭한다. Contents 디렉터리 안에있는 Eclipse 디렉터리만 Infocenter 디렉터리로 옮긴다. </li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="출판된-플러그인-복제">출판된 플러그인 복제<a class="hash-link" href="#출판된-플러그인-복제" title="제목으로 바로 가기">​</a></h3><p>앞에서 export한 플러그인을 Infocenter 디렉터리 안의 Plugins 디렉터리로 옮긴다.
현재 구조는 다음과 같다.</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">├── _CodeSignature</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── Eclipse</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│   ├── artifacts.xml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│   └── configuration</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│   └── dropins</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│   └── eclipse.ini</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│   └── features</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│   └── p2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│   └── plugins</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│   │   ├── org.apache.*.jar</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│   │   └── org.eclipse.*.jar</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│   │   └── 출판한 jar</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│   │   └── </span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│   └── readme</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── Info.plist</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── MacOS</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│   ├── eclipse</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── Resources</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│   ├── Eclipse.icns</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="infocenter-실행-스크립트-작성">Infocenter 실행 스크립트 작성<a class="hash-link" href="#infocenter-실행-스크립트-작성" title="제목으로 바로 가기">​</a></h3><p>Windows는 bat 확장자를, Mac은 sh 확장자를 가지는 파일을 생성하고 아래와 같이 작성한다.</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token shebang important">#!/bin/bash</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># Adapt these to your needs. JAVA_CMD should point to the java executable, not the Java home directory.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token assign-left variable" style="color:#36acaa">PORT</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">4321</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token assign-left variable" style="color:#36acaa">JAVA_CMD</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">/usr/bin/java</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">echo</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Starting up infocenter at http://localhost:</span><span class="token string variable" style="color:#36acaa">${PORT}</span><span class="token string" style="color:#e3116c">/help/index.jsp"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">cd</span><span class="token plain"> eclipse</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token assign-left variable" style="color:#36acaa">HELP_BASE_JAR_FILE</span><span class="token operator" style="color:#393A34">=</span><span class="token variable" style="color:#36acaa">$(</span><span class="token variable function" style="color:#d73a49">basename</span><span class="token variable" style="color:#36acaa"> ./plugins/org.eclipse.help.base*</span><span class="token variable" style="color:#36acaa">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token variable" style="color:#36acaa">$JAVA_CMD</span><span class="token plain"> -classpath plugins/</span><span class="token variable" style="color:#36acaa">${HELP_BASE_JAR_FILE}</span><span class="token plain"> org.eclipse.help.standalone.Infocenter -vm </span><span class="token variable" style="color:#36acaa">$JAVA_CMD</span><span class="token plain"> -noexec -command start -eclipsehome </span><span class="token builtin class-name">.</span><span class="token plain"> -port </span><span class="token variable" style="color:#36acaa">${PORT}</span><span class="token plain"> -clean</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="스크립트-실행-및-확인">스크립트 실행 및 확인<a class="hash-link" href="#스크립트-실행-및-확인" title="제목으로 바로 가기">​</a></h2><p>작성한 스크립트 파일을 실행한 뒤, localhost:4321/help/index.jsp로 접속한다.</p><p>아래와 같이 TOC가 생성된것을 확인할 수 있다.</p><p><img loading="lazy" alt="img8" src="/assets/images/08-Result-257ef8a5dd3ff79cab3b67553f0b2adc.png" width="3296" height="2094" class="img_ev3q"></p>]]></content:encoded>
            <category>Eclipse</category>
            <category>HelpServer</category>
            <category>InfoCenter</category>
            <category>Apache</category>
        </item>
        <item>
            <title><![CDATA[SSL 인증서 적용기]]></title>
            <link>https://wallybum.github.io/2022/05/27/SSL-인증서-적용</link>
            <guid>/2022/05/27/SSL-인증서-적용</guid>
            <pubDate>Fri, 27 May 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[SSL 인증서 적용 계기]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="ssl-인증서-적용-계기">SSL 인증서 적용 계기<a class="hash-link" href="#ssl-인증서-적용-계기" title="제목으로 바로 가기">​</a></h2><p><a href="https://security.googleblog.com/2020/02/protecting-users-from-insecure_6.html" target="_blank" rel="noopener noreferrer">여기</a>에 따르면 Google은 https로 설정된 웹사이트에서 http 콘텐츠가 포함된 혼합 콘텐츠(Mixed Content)를 차단할 것이라고 예고하였으며, 혼합 콘텐츠의 타입은 Chrome 81부터 순차적으로 차단한다고 하였다.</p><p>회사에서 제공하는 애플리케이션의 확장자가 .exe 파일이며, Chrome 83부터는 Block 되어, 이용자들이 애플리케이션을 다운받을 수 없게 된다.</p><p>그렇기 때문에 다운로드 서버에 SSL을 적용해야만 했다.</p><p>이 애플리케이션을 다운로드받기 위해서는 다음의 과정을 거친다.</p><ol><li>이용자는 홈페이지에서 이름, 연락처, 이메일 등을 입력하고 다운로드 버튼을 누른다.</li><li>입력한 이메일로 다운로드 링크가 포함된 메일이 도착한다.</li><li>메일에서 다운로드를 클릭하여 애플리케이션을 내려받는다.</li></ol><p>이때, 사용자가 사용 중인 메일 공급업체의 서버 -&gt; 회사 다운로드 서버로 접근한다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="서버-환경">서버 환경<a class="hash-link" href="#서버-환경" title="제목으로 바로 가기">​</a></h2><ul><li>OS : Ubuntu 18.04.4 LTS</li><li>Apache : Apache/2.4.29</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ssl-인증서-구매">SSL 인증서 구매<a class="hash-link" href="#ssl-인증서-구매" title="제목으로 바로 가기">​</a></h2><p>나는 가비아에서 SSL 인증서를 구매하였다. SSL 인증서를 구매할 수 있는 브랜드는 다양했다. (GlobalSign, SECTIGO, Digicert)</p><p>회사에서 운영하는 서버 자체가 규모가 크지도 않았고, 가격대별로 제공하는 기능도 거의 같았기 때문에 제일 저렴한 상품을 구매하였다.</p><p><img loading="lazy" alt="img1" src="/assets/images/01-인증서구매-41777a528a5508d9f636b55dbbee024a.png" width="2524" height="1726" class="img_ev3q"></p><p>CSR은 새로 생성하였고, 도메인은 www로 시작하지 않기 때문에 '포함하지 않음' 옵션을 선택하고 도메인을 입력하였다. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="주문-유효성-검증">주문 유효성 검증<a class="hash-link" href="#주문-유효성-검증" title="제목으로 바로 가기">​</a></h2><p>구매만 할 경우 아래와 같이 <strong>인증서등록대기</strong> 상태로 표시가 된다.</p><p><img loading="lazy" alt="img2" src="/assets/images/02-인증서등록대기-5dd8c02fef64086448f6f1118e27f411.png" width="2546" height="1014" class="img_ev3q"></p><p>구매하였다면, 5분 이내에 구입시 작성한 메일로 유효성 검증을 위한 메일을 수신할 수 있다.</p><p><img loading="lazy" alt="img3" src="/assets/images/03-인증메일-c97128f30f8b14a13631beb2e066a82d.png" width="1640" height="968" class="img_ev3q"></p><p>붉은색 박스로 표시된 <strong>Validation Code</strong>를 복사한 뒤, <strong>here</strong>을 클릭하여 열리는 사이트에 붙여넣어 주문 유효성 검증을 완료한다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="인증서-다운로드">인증서 다운로드<a class="hash-link" href="#인증서-다운로드" title="제목으로 바로 가기">​</a></h2><p>주문 유효성 검증을 완료하면 인증서를 다운로드 할 수 있는 메일을 수신할 수 있다. </p><p><img loading="lazy" alt="img4" src="/assets/images/04-다운로드메일-39cc1760a0ee3714e8ce46d4b6bcb717.png" width="1542" height="1382" class="img_ev3q"></p><p>관리 콘솔 바로 가기를 클릭하고, 본인 인증 뒤 인증서와 개인키 파일들 다운로드 받는다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="인증서-csr-코드-및-개인키-유효성-검증생략-가능">인증서 CSR 코드 및 개인키 유효성 검증(생략 가능)<a class="hash-link" href="#인증서-csr-코드-및-개인키-유효성-검증생략-가능" title="제목으로 바로 가기">​</a></h2><p>인증서 파일을 다운로드받고, 압축을 풀면 다음의 파일들로 구성된다.</p><ul><li>도메인_cert.crt</li><li>도메인_chain_cert.crt</li><li>도메인_root_cert.crt</li><li>도메인.key</li></ul><p>key 파일과 crt 파일간 유효성 검증을 한다. <del>(생략해도 된다)</del></p><blockquote><p>key 파일 검증</p></blockquote><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">openssl rsa -in 도메인.key -modulus -noout | openssl md5</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>CSR 파일 검증</p></blockquote><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">openssl x509 -in 도메인_cert.crt -modulus -noout | openssl md5</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>두 파일 간의 값이 일치해야 한다.</p><p><img loading="lazy" alt="img5" src="/assets/images/05-유효성검증-860c2453c0ab38bd6c235a82382d3e93.png" width="2610" height="994" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="인증서-설치">인증서 설치<a class="hash-link" href="#인증서-설치" title="제목으로 바로 가기">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="인증서-파일-업로드">인증서 파일 업로드<a class="hash-link" href="#인증서-파일-업로드" title="제목으로 바로 가기">​</a></h3><p>다운로드받은 파일들을 적당한 위치로 옮겨준다. 나의 경우 <strong>/usr/share/ca-certficates/도메인/</strong> 경로로 옮겼다. 옮긴 파일들은 다음과 같다</p><ul><li>도메인_.crt</li><li>도메인.key</li><li>도메인_root_cert.crt</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="인증서-설정파일-확인">인증서 설정파일 확인<a class="hash-link" href="#인증서-설정파일-확인" title="제목으로 바로 가기">​</a></h3><p>/etc/apache2/apache2.conf 파일을 열면 <strong>VirtualHost 태그</strong> 가 있는 지 확인한다. 없다면, VirtualHost 관련 설정을 모아 두는 별도의 conf 파일이 있을 수 있다. 나의 경우 다음의 내용을 확인할 수 있었다.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># Include the virtual host configurations:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">IncludeOptional sites-enabled/*.conf</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>/etc/apache2/sites-enabled 경로로 이동하였다.</p><p><img loading="lazy" alt="img6" src="/assets/images/06-site-enabled-9704b59b8fb1fccaf300e54da411f8a5.png" width="1480" height="228" class="img_ev3q"></p><p>/etc/apache2/sites-enabled에 있는 파일들은 /etc/apache2/site-available에 있는 파일들과 심볼릭 링크로 연결되어 있었다.</p><p>/etc/apache2/site-available로 이동한다. 이제 설정을 시작한다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="인증서-설정">인증서 설정<a class="hash-link" href="#인증서-설정" title="제목으로 바로 가기">​</a></h3><p>이미 서버에는 SSL 인증서가 설정되어있기 때문에, 만약 인증서를 설치하지 않았다면 현재 구조와 다를 수 있다. 또한 인증서를 설치하려는 서버의 설정에 따라 다를 수 있다. 나의 경우 proxy-host-ssl.conf 파일에 작성하였다.</p><p>/etc/apache2/apache2.conf 파일에 <strong>IncludeOptional sites-enabled/*.conf</strong> 가 설정되어있어
proxy-host-ssl.conf 의 내용이 로드가 된다.</p><blockquote><p>proxy-host-ssl.conf</p></blockquote><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;IfModule mod_ssl.c&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;VirtualHost *:443&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                ServerName &lt;도메인 명&gt; (***.com)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                ServerAlias &lt;도메인 별명(중요 x)&gt; (www.***.com)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                ServerAdmin &lt;도메인 관리자 메일주소&gt; (***@###.com)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                ProxyPass / ajp://localhost:8009/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                ErrorLog ${APACHE_LOG_DIR}/&lt;도메인&gt;/ssl-error.log</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                CustomLog ${APACHE_LOG_DIR}/&lt;도메인&gt;/ssl-access.log combined</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                SSLEngine on</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                SSLProtocol all -SSLv2 -SSLv3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                SSLCertificateFile "/usr/share/ca-certificates/&lt;도메인&gt;/도메인_cert.crt"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                SSLCertificateKeyFile "/usr/share/ca-certificates/&lt;도메인&gt;/도메인.key"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                SSLCertificateChainFile "/usr/share/ca-certificates/&lt;도메인&gt;/도메인_root_cert.crt"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;/VirtualHost&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;IfModule&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>SSLCertificateFile</strong> Key에는 앞에서 업로드 한 도메인_cert.crt 파일의 경로를 작성한다.
만약, pem 확장자라면, 도메인_cert.pem 파일의 경로를 작성한다.</p><p><strong>SSLCertificateKeyFile</strong> Key에는 도메인.key 파일의 경로를 작성한다.
만약, pem 확장자라면, 도메인_cert.key.pem 파일의 경로를 작성한다.</p><p><strong>SSLCertificateChainFile</strong> Key에는 도메인_root_cert.crt 파일의 경롤를 작성한다.
만약, 발급받은 파일이 Chain_RootCA_Bundle.crt라면, 해당 파일의 경로를 작성한다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="서버-재시작">서버 재시작<a class="hash-link" href="#서버-재시작" title="제목으로 바로 가기">​</a></h3><p>아래의 명령어를 입력하여 서버를 재가동한다.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo service apache2 restart</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="인증서-적용-확인">인증서 적용 확인<a class="hash-link" href="#인증서-적용-확인" title="제목으로 바로 가기">​</a></h2><p><img loading="lazy" alt="img7" src="/assets/images/07-인증서적용확인-137a0f9fe0497849a7e324477ccbb94d.png" width="1192" height="772" class="img_ev3q"></p>]]></content:encoded>
            <category>Ubuntu</category>
            <category>Server</category>
            <category>SSL</category>
            <category>Apache</category>
        </item>
        <item>
            <title><![CDATA[Docusaurus 블로그 구현기]]></title>
            <link>https://wallybum.github.io/2022/05/24/Docusaurus-블로그-구현기</link>
            <guid>/2022/05/24/Docusaurus-블로그-구현기</guid>
            <pubDate>Tue, 24 May 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[블로그를 만든 이유]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="블로그를-만든-이유">블로그를 만든 이유<a class="hash-link" href="#블로그를-만든-이유" title="제목으로 바로 가기">​</a></h2><p>사실 예전부터 Tistroy 블로그를 운영하였다. Tistory에서 글을 작성할 때, 내가 사용하는 스킨에 따라 개성 있는 글을 작성할 수 있다는 장점 때문에 사용하였다.
하지만, 해당 스킨은 내가 직접 만든 것이 아니기 때문에, 스킨 배포자의 라이선스 정책 변경이나, 업데이트 중단 등의 문제가 발생하였을 경우
지금까지 작성한 게시물에 대한 수정도 필요하고 귀찮아 질 것 같았다.</p><p>그리고 포스팅이란 나의 경험을 글로 써 내려가는 것이기 가급적 똥글 작성을 지양해야 하는데, 똥글이 되지 않기 위해서는 콘텐츠의 구성과 내용의 정확성도 포함되지만 가독성도 중요하다고 생각한다.
그래서 마크다운(Markdown)을 지원하는 Git Pages를 이용하고자 이주하였다. <del>(티스토리도 마크다운을 지원하지만... 뭔가 불편)</del></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="docusaurus를-선택한-이유">Docusaurus를 선택한 이유<a class="hash-link" href="#docusaurus를-선택한-이유" title="제목으로 바로 가기">​</a></h2><p>Git Pages를 생성하려고 할 때... 가장 먼저 작업했던 것은 스킨 선택이였다. <del>(디자이너도 아닌 놈이 비주얼에만 꽂혀서는)</del>
Jekyll이나 Hexo등의 스킨을 보았으나 뭔가 하나씩 맘에 들지 않았다. 그렇다고 Docusaurus가 100% 맘에 든 것은 아니지만...
적어도 지금까지 보았단 Jekyll이나 Hexo등처럼 스킨 고민하느라 시간 날리지는 않을 것 같았다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="docusaurus-gitpages-생성">Docusaurus GitPages 생성<a class="hash-link" href="#docusaurus-gitpages-생성" title="제목으로 바로 가기">​</a></h2><p>Docusaurus는 v1과 v2(현재 베타) 가 있으며, v1은 조만간 <strong>Deprecated</strong> 될 예정이며, 공식 홈페이지에서도 v2로 할 것을 적극적인 권장하고 있다.
Docusaurus로 Git Pages를 생성하기 위해서는 <strong>Node 14 이상 버전이 필요</strong>하다. </p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="초기-설정">초기 설정<a class="hash-link" href="#초기-설정" title="제목으로 바로 가기">​</a></h3><p>아래 명령어를 입력하여 Docusaurus를 설치하기 위한 뼈대를 만들어주는 명령행 도구를 사용한다. </p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">npx create-docusaurus@latest my-website classic --typescript</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>위 명령어의 <strong>my-website</strong> 에는 자유롭게 작성하면 된다.
Docusaurus는 타입스크립트 테마 컴포넌트를 작성하고 사용하는 것을 지원한다. Git Pages에서 타입스크립트를 이용한 설정을 할 예정이라면
<strong>--typescript</strong> 옵션을 추가한다.
만약, Dosaurus v1에서 사용하던 기능을 사용하려면 <strong>classic</strong> 옵션을 사용하여 classic 템플릿을 사용할 수 있다. </p><p>나는 아래와 같이 작성하였다. </p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">npx create-docusaurus@latest wallyuser.github.io classic --typescript</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>만약 node 버전이 14버전보다 낮을 경우 <strong>npx: ~개의 패키지를 ~~초만에 설치했습니다.</strong> 라는 문구만 출력되고 실제로는 설치되지 않는다.
또한, 설치하려는 PC에 npm과 yarn이 둘다 설치되어 있을 경우 알래와 같이 어떤 패키지 관리 툴로 설치할지 물어본다. 여기서는 yarn으로 진행한다.</p><p><img loading="lazy" alt="img1" src="/assets/images/01-InstallDocusaurus-c2c21bcb87194859c75fd193266b3f7c.png" width="2624" height="1106" class="img_ev3q"></p><p>패키지 관리 툴을 선택하면, 자동으로 진행이 완료된다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="로컬-서버-실행">로컬 서버 실행<a class="hash-link" href="#로컬-서버-실행" title="제목으로 바로 가기">​</a></h3><p>아래 명령으로 로컬에서 서버를 실행할 수 있다. 접속은 http://localhost:3000 으로 할 수 있다. </p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cd wallyuser.github.io</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm run start</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="git-repository-생성">Git Repository 생성<a class="hash-link" href="#git-repository-생성" title="제목으로 바로 가기">​</a></h3><p>깃허브에서 Docusaurus 소스를 보관할 레파지토리를 생성한다.
<img loading="lazy" alt="img1" src="/assets/images/02-CreateRepository-7e39718d479bb0566a393b631c949494.png" width="1376" height="748" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="최초-커밋">최초 커밋<a class="hash-link" href="#최초-커밋" title="제목으로 바로 가기">​</a></h3><p>레파지토리를 생성하면 표시되는 가이드에 따라 Docusaurus 소스를 commit &amp; push 한다.</p><div class="language-git codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-git codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git add --all</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git commit -m </span><span class="token string" style="color:#e3116c">"first commit"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git branch -M master</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git remote add origin https://github.com/wallyuser/wallyuser.github.io.git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git push -u origin master</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="gitpages-자동배포-구성하기">GitPages 자동배포 구성하기<a class="hash-link" href="#gitpages-자동배포-구성하기" title="제목으로 바로 가기">​</a></h3><p>먼저 docusaurus.config.js 파일을 열어 아레와 같이 설정한다.</p><blockquote><p>docusaurus.config.js</p></blockquote><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> config </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">title</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'WallyUser'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 자유롭게 작성</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">tagline</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'WallyUser Blog'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 지유롭게 작성</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">url</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'https://wallyuser.github.io'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 본인의 gitPages URL</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">baseUrl</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'/'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">onBrokenLinks</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'warn'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 기본값은 throw</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">onBrokenMarkdownLinks</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'warn'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">favicon</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'img/favicon.ico'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">organizationName</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'wallyuser'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// Github 유저명.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">projectName</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'wallyuser.github.io'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// Github repository 명.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">deploymentBranch</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'gh-pages'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 빌드후 자동으로 배포될 브런치.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">trailingSlash</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>자동배포를 위해 root 경로에 .github/workflows 디렉터리를 생성한다.
그 다음 deploy.yml 파일을 생성하여 아래와 같이 작성한다.
해당 내용은 <a href="https://docusaurus.io/ko/docs/deployment#triggering-deployment-with-github-actions" target="_blank" rel="noopener noreferrer">여기</a>에서 확인할 수 있으며, 해당 사이트에 있는 내용 그대로 붙여넣는다.</p><blockquote><p>.github/workflows/deploy.yml</p></blockquote><div class="language-yml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Deploy to GitHub Pages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">on</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">push</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">branches</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> master</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># Review gh actions docs if you want to further define triggers, paths, etc</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">jobs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">deploy</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Deploy to GitHub Pages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">runs-on</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ubuntu</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">latest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">steps</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">uses</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> actions/checkout@v2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">uses</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> actions/setup</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">node@v3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">with</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">node-version</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> 16.x</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">cache</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> yarn</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Install dependencies</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">run</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> yarn install </span><span class="token punctuation" style="color:#393A34">-</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">frozen</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">lockfile</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Build website</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">run</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> yarn build</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic"># Popular action to deploy to GitHub Pages:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic"># Docs: https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-docusaurus</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Deploy to GitHub Pages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">uses</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> peaceiris/actions</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">gh</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">pages@v3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">with</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">github_token</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> $</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> secrets.GITHUB_TOKEN </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic"># Build output to publish to the `gh-pages` branch:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">publish_dir</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ./build</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic"># The following lines assign commit authorship to the official</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic"># GH-Actions bot for deploys to `gh-pages` branch:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic"># https://github.com/actions/checkout/issues/13#issuecomment-724415212</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic"># The GH actions bot is used by default if you didn't specify the two fields.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic"># 자신의 자격증명으로 교체할 수 있습니다.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">user_name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> github</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">actions</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">bot</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">user_email</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> 41898282+github</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">actions</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">bot</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">@users.noreply.github.com</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>deploy.yml</strong> 의 Node 버전(16.x)과 현재 사용하고 있는 Node 버전은 무관하다.
주의할 점은 현재 브런치 명과 deploy.yml에 명시된 브런치 명이 일치해야한다.</p><p>위와같이 설정한 후, 아래 명령어를 이용하여 빌드를 한다. </p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">yarn build</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" alt="img1" src="/assets/images/04-build-d43d90ae68cdc488bb615cd3755e3c30.png" width="2526" height="1442" class="img_ev3q"></p><p>그리고 Github &gt; Settings &gt; Developer settings &gt; Personal access tokens &gt; Generate New Token을 클릭한다.</p><p>아래 그림과 같이 설정하고, 토큰을 생성한다.</p><p><img loading="lazy" alt="img1" src="/assets/images/03-CreateAccessToken-277fa91a592f2fedec35ee3b98e4aabd.png" width="1488" height="1224" class="img_ev3q"></p><p>그러면 아래와 같이 토큰이 생성된다.</p><p>다시 터미널로 돌아와 아래 명령어를 입력하여 deploy 한다.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">GIT_USER=&lt;User명&gt; yarn deploy</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>그러면 아래 그림과 같이 패스워드를 물어보는데, 앞에서 발급받은 토큰 키를 복사하여 붙여넣는다.
<img loading="lazy" alt="img1" src="/assets/images/05-InputToken-346325d912b3d477abfaaaaa64041275.png" width="2526" height="1442" class="img_ev3q"></p><p>push가 정상적으로 되었다면, 레파지토리 &gt; settings &gt; pages 에서 source를 gh-pages로 변경한다.</p><p><img loading="lazy" alt="img1" src="/assets/images/06-changeRepo-c072ce8c23850dd950f0535e1e8822ac.png" width="2120" height="758" class="img_ev3q"></p><p>그다음 Actions 메뉴에 들어가면 github-actions가 자동으로 빌드하고 배포를 하게되며, 이 과정을 확인할 수 있다.
<img loading="lazy" alt="img1" src="/assets/images/07-confirm-df5e1893d5c20fdf6fa45fba7aebcb4e.png" width="2174" height="984" class="img_ev3q"></p>]]></content:encoded>
            <category>Blog</category>
        </item>
    </channel>
</rss>